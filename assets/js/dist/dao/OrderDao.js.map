{"version":3,"sources":["../../src/dao/OrderDao.js"],"names":["Order","OrderDao","connection","_connection","_store","order","Promise","resolve","reject","addRequest","transaction","objectStore","add","onsuccess","onerror","deleteRequest","clear","loadRequest","openCursor","orders","currentLine","e","target","result","value","push","_date","_amount","_price","continue"],"mappings":";;;;;;;;;;;;;;;AAAQA,iB,eAAAA,K;;;;;;;;;;;;;;;;;;;;;gCAEKC,Q;AAET,kCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,QAAd;AACH;;;;wCAEGC,K,EAAO;AAAA;;AAEP,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,aAAa,MAAKN,WAAL,CACZO,WADY,CACA,MAAKN,MADL,EACa,WADb,EAEZO,WAFY,CAEA,MAAKP,MAFL,EAGZQ,GAHY,CAGRP,KAHQ,CAAjB;;AAKAI,uCAAWI,SAAX,GAAuB;AAAA,uCACnBN,QAAQ,cAAR,CADmB;AAAA,6BAAvB;;AAGAE,uCAAWK,OAAX,GAAqB;AAAA,uCACjBN,OAAO,wBAAP,CADiB;AAAA,6BAArB;AAEH,yBAZM,CAAP;AAaH;;;8CAEQ;AAAA;;AAEL,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIO,gBAAgB,OAAKZ,WAAL,CACfO,WADe,CACH,OAAKN,MADF,EACU,WADV,EAEfO,WAFe,CAEH,OAAKP,MAFF,EAGfY,KAHe,EAApB;;AAKAD,0CAAcF,SAAd,GAA0B;AAAA,uCACtBN,QAAQ,iBAAR,CADsB;AAAA,6BAA1B;;AAGAQ,0CAAcD,OAAd,GAAwB;AAAA,uCACpBN,OAAO,2BAAP,CADoB;AAAA,6BAAxB;AAEH,yBAZM,CAAP;AAaH;;;2CAEM;AAAA;;AAEH,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIS,cAAc,OAAKd,WAAL,CACbO,WADa,CACD,OAAKN,MADJ,EACY,WADZ,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGbc,UAHa,EAAlB;;AAKA,gCAAIC,SAAS,EAAb;;AAEAF,wCAAYJ,SAAZ,GAAwB,aAAK;;AAEzB,oCAAIO,cAAcC,EAAEC,MAAF,CAASC,MAA3B;;AAEA,oCAAKH,WAAL,EAAmB;AACf,wCAAII,QAAQJ,YAAYI,KAAxB;;AAEAL,2CAAOM,IAAP,CAAY,IAAIzB,KAAJ,CAAUwB,MAAME,KAAhB,EAAuBF,MAAMG,OAA7B,EAAsCH,MAAMI,MAA5C,CAAZ;AACAR,gDAAYS,QAAZ;AACH,iCALD,MAKO;AACHtB,4CAAQY,MAAR;AACH;AACJ,6BAZD;;AAcAF,wCAAYH,OAAZ,GAAsB;AAAA,uCAClBN,OAAO,0BAAP,CADkB;AAAA,6BAAtB;AAEH,yBAzBM,CAAP;AA0BH","file":"OrderDao.js","sourcesContent":["import {Order} from '../model/Order';\n\nexport class OrderDao {\n\n    constructor(connection) {\n        \n        this._connection = connection;\n        this._store = 'orders';\n    }\n\n    add(order) {\n\n        return new Promise((resolve, reject) => {\n\n            let addRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .add(order);\n            \n            addRequest.onsuccess = e =>\n                resolve('Order added.');\n            \n            addRequest.onerror = e =>\n                reject('Order cannot be added.');\n        });\n    }\n\n    delete() {\n\n        return new Promise((resolve, reject) => {\n\n            let deleteRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .clear();\n            \n            deleteRequest.onsuccess = e =>\n                resolve('Orders removed.');\n            \n            deleteRequest.onerror = e =>\n                reject('Orders cannot be removed.');\n        });\n    }\n\n    load() {\n\n        return new Promise((resolve, reject) => {\n\n            let loadRequest = this._connection\n                .transaction(this._store, 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n            \n            let orders = [];\n\n            loadRequest.onsuccess = e => {\n\n                let currentLine = e.target.result;\n\n                if ( currentLine ) {\n                    let value = currentLine.value;\n                    \n                    orders.push(new Order(value._date, value._amount, value._price));\n                    currentLine.continue();\n                } else {                    \n                    resolve(orders);\n                }\n            }                \n            \n            loadRequest.onerror = e =>\n                reject('Orders cannot be loaded.');\n        });\n    }\n}"]}